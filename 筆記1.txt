課程網頁: https://github.com/ntu-csie-train/chatbot-class

Day1:
Build設定歡迎訊息
1. 刪掉build的{{}}參數，可以看到他支援的其他FB參數
2. Default Answer即是當不懂使用者的預設訊息	
Set up AI
1. 可以設定Rule
2. BOT REPLIES WITH "TEXT"  可以設定為block (即可改成welcome message)
Configure:
1. 設定對話框左邊三條線的設定 (可能需要F5重整才會顯示設定好的url或block)
2. 如果需要新增block則需要到Build新增block


回來Build
3. 可以在build那邊的contact block那邊做修正，例如新增圖檔(例如截地圖)
4. 新增gallery的block，並可以在set up AI新增rule去觸發該gallery
   gallery 的block下方可以新增button(例如寫:詳情  然後輸入url)，此時若已再
   set up AI那邊輸入好對應的rule時，bot那邊就可以看到惹!
5.QuickReply

PS. 若需要斷開連結，configure選disconnect
----------------------------------------------------------------------------
Day2:
(npm是node自帶，所以裝好不用再裝node)

1. 安裝VScode, NodeJS  (VScode開啟Terminal方式: ctrl+ '~')

2. 需註冊Heroku> 因為這樣全世界才能連到你的server
3. 開啟專案資料夾後，若輸入node -v: 出現版號及node安裝正常
4. npm init: 出現要你初始化的一些設定(像專案名、keyword(上架至npm可被搜尋的關鍵字))
5. OK後就會出現package.json
6. 安裝express指令:   npm install express --save，此時會出現node_module資料夾
   (--save 存到你的專案敘述檔，目的: 將你的資訊存到package_json，當code給別人時才有辦法用! )
   node_module會那麼多是因為express會用到的相依套件也會安裝

   express是一個比較輕量級的套件，雖然node本身也有http module，但就會寫比較多
   Express是一個把routing包稍好的套件

7. 建立index.js 貼上以下code: 
const express = require('express')   //字串表套件
const app = express()   // 用express建app

app.get('/hi', function (req, res) {      // '/hi':路徑, 若改為/hi則, 後面是handler 
                                        // req:使用者送過來的訊息, res:要回傳給使用者

  res.send('Hello World!!!')
})

app.listen(3000, function () {          //http request有監聽到3000 port，若成功才call back'function'
  console.log('Example app listening on port 3000!')
})
再用 node index.js即可以用瀏覽器輸入localhost:3000/hi看到hello world!   同時也可以增加其他的routing


8. 
query的使用方式:
可參考: https://nodejs.org/api/url.html#url_url_strings_and_url_objects  的網址解釋

例如: 將以下的code輸入完後，在網址輸入http://localhost:3000/hello?a=1&b=2
?後面的內容即為query的值，並可以在terminal看到log為:
***
{ a: '1', b: '2' }
***

app.get('/hello', function (req, res) { 
    let query = req.query
    console.log("***")
    console.log(query)
    console.log("***")
    res.send('Hello World!!!' + query)
})

9. 但如何要讓server跟別得Server呢?
首先先安裝request:  npm install request --save

10. 新增一個server.js檔，輸入以下code:
const request = require('request');


request('http://www.google.com', function (error, response, body) {   
    
//function:callback當成功對前面連線後拿到的資訊回來，就會呼叫此callback，會提供此3個參數,response及此成功連線的回傳值，
// 像是有status code

  console.log('error:', error); // Print the error if one occurred
  console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received
  console.log('body:', body); // Print the HTML for the Google homepage.
});


// 輸入node server.js所看到的log為google.com的原始碼
此時會看到log的內容為google.com的原始碼

11. 改用成以下網址的話:
(假設我開了另個JS檔: send.js 來測試googlemap api)
const request = require('request');

let address = 'Taipei 101'
let url = `https://maps.googleapis.com/maps/api/geocode/json?address=${address}`

request(url, function (error, response, body) {   
  console.log('error:', error); // Print the error if one occurred
  console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received
  console.log('body:', body); // Print the HTML for the Google homepage.
});
node send.js 就會拿到map資料

12.
參考request套件解釋: https://github.com/request/request#requestoptions-callback
例如在原本index.js新增:
app.post('/hello', function (req, res) {    // get是method
    let query = req.query
    let username = query.username　　　　// 就可以拿到Tom
    console.log("***")
    console.log(query)
    res.send('[POST]Hello ' +username)
})

新增server_post.js
const request = require('request');
request({
    url: 'http://localhost:3000/hello',
    method: 'post',
    qs: {
        username: 'Tom'
    }

}, 
function (error, response, body) {   
  console.log('error:', error); // Print the error if one occurred
  console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received
  console.log('body:', body); // Print the HTML for the Google homepage.
});

index.js的Server開啟，在node server_post就可以看到post的log
(瀏覽器無法直接看到post，但可以安裝外掛!)


 













